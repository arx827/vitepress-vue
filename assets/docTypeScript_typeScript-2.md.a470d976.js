import{_ as e,o as a,c as t,O as c}from"./chunks/framework.1e3fe59b.js";const u=JSON.parse('{"title":"TypeSctipt 邁向專家之路","description":"","frontmatter":{"title":"TypeSctipt 邁向專家之路"},"headers":[],"relativePath":"docTypeScript/typeScript-2.md","filePath":"docTypeScript/typeScript-2.md"}'),r={name:"docTypeScript/typeScript-2.md"},i=c('<h1 id="第一篇-typescript-入門準備" tabindex="-1">第一篇 TypeScript 入門準備 <a class="header-anchor" href="#第一篇-typescript-入門準備" aria-label="Permalink to &quot;第一篇 TypeScript 入門準備&quot;">​</a></h1><hr><h1 id="_02-認識-typescript-及-本書內容" tabindex="-1">02 認識 TypeScript 及 本書內容 <a class="header-anchor" href="#_02-認識-typescript-及-本書內容" aria-label="Permalink to &quot;02 認識 TypeScript 及 本書內容&quot;">​</a></h1><h2 id="_2-1-typescript-可提高-javascript-開發效能" tabindex="-1">2-1 TypeScript 可提高 JavaScript 開發效能 <a class="header-anchor" href="#_2-1-typescript-可提高-javascript-開發效能" aria-label="Permalink to &quot;2-1 TypeScript 可提高 JavaScript 開發效能&quot;">​</a></h2><ul><li><h3 id="typescript-如何增進開發者的生產力" tabindex="-1">TypeScript 如何增進開發者的生產力 <a class="header-anchor" href="#typescript-如何增進開發者的生產力" aria-label="Permalink to &quot;TypeScript 如何增進開發者的生產力&quot;">​</a></h3><p><code>TypeScript</code> 的優勢在於它能有效預防一般的 <code>JavaScript</code> 程式碼撰寫錯誤，尤其是透過 <code>靜態型別</code> 讓 <code>JavaScript</code> 的動態型別更容易維護、操作上更安全。<code>TypeScript</code> 還加入了像是 <code>類別 (class)</code>、<code>介面 (interface)</code>、<code>泛型 (generic type)</code> 等 <code>JavaScript</code> 原本沒有的功能。</p></li><li><h3 id="產能提升的陷阱" tabindex="-1">產能提升的陷阱 <a class="header-anchor" href="#產能提升的陷阱" aria-label="Permalink to &quot;產能提升的陷阱&quot;">​</a></h3><p>使用 <code>TypeScript</code> 並不能代表 <code>JavaScript</code> 的開發效能就會有絕對的提升。 開發者除了知道某一功能如何運作之外，同時也得了解 <code>TypeScript</code> 實作的方式，才能發揮出最大功效。</p><p>若不願意投資時間學習 <code>JavaScript</code>，就不該貿然使用 <code>TypeScript</code>。在缺乏任何 <code>JavaScript</code> 知識的前提下，硬是要把 <code>TypeScript</code> 套用到專案，只會徒增開發難度。</p></li></ul><h2 id="_2-2-typescript-讓專案能相容於舊版-javascript" tabindex="-1">2-2 TypeScript 讓專案能相容於舊版 JavaScript <a class="header-anchor" href="#_2-2-typescript-讓專案能相容於舊版-javascript" aria-label="Permalink to &quot;2-2 TypeScript 讓專案能相容於舊版 JavaScript&quot;">​</a></h2><p><code>TypeScript</code> 的便利之處就在於，它允許你指定 <code>JavaScript</code> 編譯目標，依然能在專案開發時套用新版 <code>JavaScript</code> 功能。編譯器會產生出符合舊版本規範的 <code>JavaScript</code> 程式碼，確保專案能配合舊環境的執行條件。</p><h2 id="_2-3-閱讀本書前的準備" tabindex="-1">2-3 閱讀本書前的準備 <a class="header-anchor" href="#_2-3-閱讀本書前的準備" aria-label="Permalink to &quot;2-3 閱讀本書前的準備&quot;">​</a></h2><ul><li><h3 id="你需要具備哪些基礎知識" tabindex="-1">你需要具備哪些基礎知識？ <a class="header-anchor" href="#你需要具備哪些基礎知識" aria-label="Permalink to &quot;你需要具備哪些基礎知識？&quot;">​</a></h3><p>最好能對 <code>資料型別</code> 與 <code>JavaScript</code> 的基礎功能有一定的暸解。</p></li><li><h3 id="開發環境如何設定" tabindex="-1">開發環境如何設定？ <a class="header-anchor" href="#開發環境如何設定" aria-label="Permalink to &quot;開發環境如何設定？&quot;">​</a></h3><p><code>TypeScript</code> 需要的全部開發工具，只有第 1 章節安裝的東西。後頭有些章節還會安裝其他額外套件，但都有完整的操作步驟。</p></li></ul><h2 id="_2-4-本書的內容" tabindex="-1">2-4 本書的內容 <a class="header-anchor" href="#_2-4-本書的內容" aria-label="Permalink to &quot;2-4 本書的內容&quot;">​</a></h2><ul><li><h3 id="本書的架構如何編排" tabindex="-1">本書的架構如何編排 <a class="header-anchor" href="#本書的架構如何編排" aria-label="Permalink to &quot;本書的架構如何編排&quot;">​</a></h3><p>本書的內容，依照主題重點，分成三大部分：</p><ul><li><h4 id="_1-第一篇『-typescript-入門準備-』" tabindex="-1">1. 第一篇『 TypeScript 入門準備 』 <a class="header-anchor" href="#_1-第一篇『-typescript-入門準備-』" aria-label="Permalink to &quot;1. 第一篇『 TypeScript 入門準備 』&quot;">​</a></h4> 為必備的基礎知識，為你的 <code>TypeScript</code> 開發打下穩固基礎。包括：<code>JavaScript</code> 快速入門以及如何運用 <code>TypeScript</code> 編譯器工具。</li><li><h4 id="_2-第二篇『-typescript-徹底解析-』" tabindex="-1">2. 第二篇『 TypeScript 徹底解析 』 <a class="header-anchor" href="#_2-第二篇『-typescript-徹底解析-』" aria-label="Permalink to &quot;2. 第二篇『 TypeScript 徹底解析 』&quot;">​</a></h4> 介紹靜態型別、類別、介面、泛型等 <code>TypeScript</code> 生產力特色，搭配各種範例進行深入淺出的探討。</li><li><h4 id="_3-第三篇『-typescript-實戰攻略-』" tabindex="-1">3. 第三篇『 TypeScript 實戰攻略 』 <a class="header-anchor" href="#_3-第三篇『-typescript-實戰攻略-』" aria-label="Permalink to &quot;3. 第三篇『 TypeScript 實戰攻略 』&quot;">​</a></h4> 以 <code>TypeScript</code> 在最受歡迎的 <code>Angular</code>、<code>React</code> 與 <code>Vue.js</code> 開發框架上打造網頁應用程式。</li></ul></li><li><h3 id="本書的範例" tabindex="-1">本書的範例 <a class="header-anchor" href="#本書的範例" aria-label="Permalink to &quot;本書的範例&quot;">​</a></h3><p>可以透過 <a href="https://www.flg.com.tw/bk/st/F1485" target="_blank" rel="noreferrer">旗標官網</a>，並註冊會員、輸入通關密語後，可免累下載。</p></li></ul><h2 id="_2-5-本章總結" tabindex="-1">2-5 本章總結 <a class="header-anchor" href="#_2-5-本章總結" aria-label="Permalink to &quot;2-5 本章總結&quot;">​</a></h2><p>本章解釋了 <code>TypeScript</code> 與 <code>JavaScript</code> 的關係，能替網頁應用程式開發帶來的好處。</p>',13),p=[i];function o(d,l,h,s,n,S){return a(),t("div",null,p)}const _=e(r,[["render",o]]);export{u as __pageData,_ as default};
